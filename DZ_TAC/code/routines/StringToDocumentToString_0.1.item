package routines;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;


public class StringToDocumentToString {
	
	public static void main(String[] args){
		final String xmlstr = "<?xml version =\"1.0\" encoding\"UTF-8\"";
		Document doc = convertStringToDocument(xmlstr);
		
		String str = convertDocumentToString(doc);
		System.out.println(str);
	}
	
	public static String convertDocumentToString(Document doc) {
		
		TransformerFactory tf = TransformerFactory.newInstance();
		Transformer transformer;
		try {
			transformer = tf.newTransformer();
			// bellow code to remove XML declaration
			// transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
			StringWriter writer = new StringWriter();
			transformer.transform(new DOMSource(doc), new StreamResult(writer));
			String output = writer.getBuffer().toString();
			return output;
		} catch (TransformerException e) {
			e.printStackTrace();	
		}
	
		return null;
	}
	
	public static Document convertStringToDocument(String xmlstr) {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;
		try
		{
			builder = factory.newDocumentBuilder();
			Document doc = builder.parse(new InputSource( new StringReader(xmlstr)));
			return doc;
		}catch (Exception e){
			e.printStackTrace();
		}
		return null;
	}
	
	public static Document stringToDom(String xmlSource) 
			throws SAXException, ParserConfigurationException, IOException{
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder =  factory.newDocumentBuilder();
		return builder.parse(new InputSource( new StringReader(xmlSource)));
	}
	
	public static void main2(String[] args) throws Exception{
		String test = "<?xml version =\"1.0\" encoding\"UTF-8\"";
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document document = builder.parse(new ByteArrayInputStream(test.getBytes("ISO-8859-8")));
		NodeList list = document.getChildNodes();
		recurse(list);
	}
	
	static void recurse(NodeList list){
		if (list == null || list.getLength() == 0){
			return;
		}
		else {
			for (int i = 0; i < list.getLength(); i++){
				Node item = list.item(i);
				System.out.println(item);
				recurse(item.getChildNodes());
			}
		}
	}
	
	public static void replace(Node root){
		if (root.getNodeType() == root.TEXT_NODE){
			root.setTextContent(root.getTextContent().replace("<?xml version=\"1.0\" encoding=\"ISO-8859-8\"?>", ""));
		}
		for (int i =0; i < root.getChildNodes().getLength(); i++){
			outputTextOfNode(root.getChildNodes().item(i));
		}
	}

	private static void outputTextOfNode(Node item) {
		// TODO Auto-generated method stub
		
	}


}
